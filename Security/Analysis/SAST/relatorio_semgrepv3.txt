                   
                   
┌─────────────────┐
│ 4 Code Findings │
└─────────────────┘
              
    Dockerfile
   ❯❯❱ dockerfile.security.missing-user.missing-user
          By not specifying a USER, a program in the container may run as 'root'. This is a security hazard.
          If an attacker can control a process running as root, they may have control over the container.   
          Ensure that the last USER in a Dockerfile is a USER other than 'root'.                            
          Details: https://sg.run/Gbvn                                                                      
                                                                                                            
           ▶▶┆ Autofix ▶ USER non-root CMD ["streamlit", "run", "streamlit_app/app.py", "--server.port=8000", "--
              server.enableCORS=false"]                                                                          
           12┆ CMD ["streamlit", "run", "streamlit_app/app.py", "--server.port=8000", "--
               server.enableCORS=false"]                                                 
               
    app/main.py
    ❯❱ python.fastapi.security.wildcard-cors.wildcard-cors
          CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.
          Details: https://sg.run/KxApY                                                              
                                                                                                     
           29┆ allow_origins=["*"],
                                        
    streamlit_app/auth/google_login.html
    ❯❱ html.security.audit.missing-integrity.missing-integrity
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
            9┆ <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
            ⋮┆----------------------------------------
           10┆ <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>

name: CI Pipeline

on:
  push:
    branches: [main, "feature/*"]
  pull_request:
    branches: [main, "feature/*"]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Recriar firebase_key.json a partir do segredo
        run: |
          mkdir -p app
          echo "${{ secrets.FIREBASE_KEY_JSON_BASE64 }}" | base64 --decode > app/firebase_key.json

      - name: Export environment variables
        run: |
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> $GITHUB_ENV
          echo "ADMIN_CRED=${{ secrets.ADMIN_CRED }}" >> $GITHUB_ENV
          echo "CLIENT_CRED=${{ secrets.CLIENT_CRED }}" >> $GITHUB_ENV

      # Opcional: Ativa os teus testes de unidade aqui
      #- name: Run Pytest
      #  run: |
      #    pip install pytest
      #    pytest tests/

      - name: Run Bandit (SAST)
        continue-on-error: true
        run: |
          pip install bandit
          bandit -r app/
          bandit -r streamlit_app/

      - name: Run pip-audit (SCA)
        continue-on-error: true
        run: |
          pip install pip-audit
          pip-audit

  deploy-staging:
    name: Deploy to Docker Compose (Staging)
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Recriar firebase_key.json a partir do segredo
        run: |
          mkdir -p app
          echo "${{ secrets.FIREBASE_KEY_JSON_BASE64 }}" | base64 --decode > app/firebase_key.json

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build and run services with Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d --build

      - name: Verificar serviços ativos (docker ps)
        run: docker ps

      - name: Esperar pelo backend
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:8000 > /dev/null; then
              echo "Backend está ativo!";
              exit 0
            fi
            echo "Aguardando backend iniciar... ($i/15)"
            sleep 2
          done
          echo "Backend não iniciou!";
          exit 1

      - name: Ver logs do backend
        if: failure()
        run: |
          docker logs $(docker ps -aqf "name=backend") || true

      - name: Esperar pelo frontend
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:8501 > /dev/null; then
              echo "Frontend está ativo!";
              exit 0
            fi
            echo "Aguardando frontend iniciar... ($i/15)"
            sleep 2
          done
          echo "Frontend não iniciou!";
          exit 1

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install test dependencies
        run: pip install requests python-dotenv

      - name: Wait for services to be ready
        run: sleep 10

      - name: Debug curl backend antes do DAST
        run: curl -v http://localhost:8000/auth/google_login.html
        
      - name: Run DAST Python tests
        run: python security_tests/dast_tests.py

      - name: Ver logs do backend
        if: failure()
        run: |
          docker logs $(docker ps -aqf "name=backend") || true

  dast-test:
    name: DAST - Custom Security Scan
    runs-on: ubuntu-latest
    needs: deploy-staging

    env:
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install test dependencies
        run: pip install requests python-dotenv

      - name: Wait for services to be ready
        run: sleep 10

      - name: Debug curl backend antes do DAST
        run: curl -v http://localhost:8000/auth/google_login.html

      - name: Run DAST Python tests
        run: python security_tests/dast_tests.py

      - name: Ver logs do backend
        if: failure()
        run: |
          docker logs $(docker ps -aqf "name=backend") || true
